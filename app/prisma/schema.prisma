// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
  seed          = "ts-node prisma/seed.ts"
}

model User {
  id             Int      @id @default(autoincrement())
  firstName      String   @db.VarChar(50)
  lastName       String   @db.VarChar(50)
  phoneNumber    String   @db.VarChar(15)
  billingAddress String?  @db.VarChar(255)
  zipCode        String?  @db.VarChar(10)
  city           String?  @db.VarChar(100)
  country        String?  @db.VarChar(100)
  email          String   @unique @db.VarChar(100)
  password       String
  role           String   @default("user")
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([email])
  @@map("users")
}

model Price {
  id        Int      @id @default(autoincrement())
  barcode   String   @unique
  price     Float
  currency  String   @default("EUR")
  updatedAt DateTime @updatedAt

  @@map("prices")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  brand       String
  picture     String?
  category_id Int?
  barcode     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  nutritionalInfo NutritionalInfo[]
  Stock           Stock[]
}

model NutritionalInfo {
  id                 Int    @id @default(autoincrement())
  product_id         Int
  energy_kcal_100g   Float?
  sugars_100g        Float?
  fats_100g          Float?
  proteins_100g      Float?
  carbohydrates_100g Float?
  salt_100g          Float?
  fiber_100g         Float?

  product Product @relation(fields: [product_id], references: [id])
}

model Stock {
  id        Int      @id @default(autoincrement()) // La cl√© primaire est id
  productId Int      @unique // Assurez-vous que productId est unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id])
}
