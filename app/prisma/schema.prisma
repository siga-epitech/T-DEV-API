// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
  seed          = "ts-node prisma/seed.ts"
}

model User {
  id                  Int      @id @default(autoincrement()) @map("id")
  firstName           String   @map("first_name") @db.VarChar(50)
  lastName            String   @map("last_name") @db.VarChar(50)
  phoneNumber         String?  @map("phone_number") @db.VarChar(15)
  billingAddress      String?  @map("billing_address") @db.VarChar(255)
  zipCode             String?  @map("zip_code") @db.VarChar(10)
  city                String?  @map("city") @db.VarChar(100)
  country             String?  @map("country") @db.VarChar(100)
  email               String   @unique @map("email") @db.VarChar(100)
  password            String   @map("password") @db.VarChar(255)
  role                Role     @relation(fields: [roleId], references: [id], map: "role_id")
  roleId              Int
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  refreshToken        String?  @map("refresh_token") @db.Text
  refreshTokenExpires DateTime? @map("refresh_token_expires")

  @@index([email])
  @@map("users")
}


model Role {
  id              Int              @id @default(autoincrement()) @map("id")
  name            String           @unique @map("name") @db.VarChar(50)
  description     String?          @map("description") @db.VarChar(255)
  users           User[]
  rolePermissions RolePermission[] 

  @@map("roles")
}

model Permission {
  id              Int              @id @default(autoincrement()) @map("id")
  name            String           @unique @map("name") @db.VarChar(50)
  description     String?          @map("description") @db.VarChar(255)
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id]) 

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Price {
  id        Int      @id @default(autoincrement())
  barcode   String   @unique
  price     Float
  currency  String   @default("EUR")
  updatedAt DateTime @updatedAt

  @@map("prices")
}
model Product {
  id          Int    @id @default(autoincrement())
  name        String @unique
  brand       String
  picture     String?
  category_id Int?
  barcode     String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  nutritionalInfo NutritionalInfo[]
}

model NutritionalInfo {
  id                 Int     @id @default(autoincrement())
  product_id         Int
  energy_kcal_100g   Float?
  sugars_100g        Float?
  fats_100g          Float?
  proteins_100g      Float?
  carbohydrates_100g Float?
  salt_100g          Float?
  fiber_100g         Float?

  product Product @relation(fields: [product_id], references: [id])
}


