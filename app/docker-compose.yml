services:
  api:
    build:
      context: . 
      dockerfile: Dockerfile.dev  # Changer pour Dockerfile.prod en prod
    environment:
      - DATABASE_URL=${DATABASE_URL}  # S'assure que la variable d'environnement est correctement utilisée
    ports:
      - "3000:3000"
    depends_on:
      - db
    volumes:
      - .:/usr/src/app
    networks:
      - app-network
    command: npm run start:dev
  
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - DATABASE_URL=postgresql://trinity:trinity@db:5432/trinity_dev?schema=public  # Connexion à la base de données dans le conteneur migrations
    depends_on:
      - db
    volumes:
      - .:/usr/src/app
    networks:
      - app-network
    entrypoint: ["./scripts/migrate.sh"]  # Utilisation du script de migration
    restart: "no"

  db:
    image: postgres
    environment:
      POSTGRES_USER: trinity
      POSTGRES_PASSWORD: trinity
      POSTGRES_DB: trinity_dev  # Changer pour trinity_prod en prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  
    networks:
      - app-network

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
